/*
 * xcp_eth_init.c
 *
 *  Created on: Mar 23, 2020
 *      Author: Ximu Zhang
 *      Initialize the XCP and TCP/UDP.
 */

// include libraries
#include <stdio.h>
#include "netif/xadapter.h"
#include "lwip/udp.h"
#include "lwip/tcpip.h"
#include "lwip/sys.h"
#include "XcpBasic.h"
#include "xparameters.h"
#include "xil_exception.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif
#include "xil_cache.h"
#include "FreeRTOS.h"
#include "task.h"
#include "sleep.h"


/*
 * XCP
 */
#define PLATFORM_EMAC_BASEADDR XPAR_XEMACPS_0_BASEADDR
#define PLATFORM_ZYNQ

extern u32 XCP_100us_Counter;

#define THREAD_STACKSIZE        1024
#define MAIN_THREAD_STACKSIZE   2048

#define	MAIN_THREAD_PRIORITY		( DEFAULT_THREAD_PRIO + 0 ) // task priority

#define XCP_FREQUENCY_MS			( 2UL / portTICK_PERIOD_MS ) // 2ms period

// XCP calibration enable
//#define XCP_ENABLE_CALIBRATION
//#define XCP_DISABLE_CALIBRATION_PAGE

static int complete_nw_thread;

/* Function prototypes */
void start_application();
void network_thread();
int main_thread();
void lwip_init();
void XcpInit(void);
void recv_callback(void *arg, struct udp_pcb *upcb,
                              struct pbuf *p, struct ip4_addr *addr, u16_t port);

//extern unsigned long int TimerLoadValueV;

XIntc Intc;  /* interrupt_test Device driver instance*/

/* set up netif stuctures */
static struct netif server_netif;
struct netif *echo_netif;

// Global Variables for Ethernet handling
struct ip4_addr RemoteAddr;

void xcpTransmit() {
//	TickType_t xNextWakeTime;
//	xNextWakeTime = xTaskGetTickCount();

	while (1) {
//		vTaskDelayUntil( &xNextWakeTime, XCP_FREQUENCY_MS );
		vTaskDelay(XCP_FREQUENCY_MS);

		//XCP DAQ event
		XcpEvent(1);
	}
}

void network_thread() {
	struct ip4_addr ipaddr, netmask, gw;

	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x10 };

	/* Use the same structure for the server and the echo server */
//	echo_netif = &server_netif;

	/* initialize IP addresses to be used */
	//IP address of ZYNQ7000
	IP4_ADDR(&ipaddr, 192, 168, 1, 10);
	IP4_ADDR(&netmask, 255, 255, 255, 0);
	IP4_ADDR(&gw, 192, 168, 1, 1);
	//IP address of the PC
	IP4_ADDR(&RemoteAddr, 192, 168, 1, 11);

	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(&server_netif, &ipaddr, &netmask, &gw, mac_ethernet_address, PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\r\n");
		return;
	}
	netif_set_default(&server_netif);

	/* specify that the network if is up */
	netif_set_up(&server_netif);

	/* start packet receive thread - required for lwIP operation */
	sys_thread_new("xemacif_input_thread", (void(*)(void*))xemacif_input_thread,
			&server_netif, THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	complete_nw_thread = 1;

    vTaskDelete(NULL);

//	sys_thread_new("DAQ", xcpTransmit, 0, THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
}

int main_thread() {
	/* initialize lwIP before calling sys_thread_new */
	lwip_init();

	/* any thread using lwIP should be created using sys_thread_new() */
	sys_thread_new("network_thread", network_thread, NULL,
			THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);

	while(!complete_nw_thread)
		usleep(50);

	/* start the application (web server, rxtest, txtest, etc..) */
//	start_udp_application();
	start_application();

	/* Initialize XCP */
	XcpInit();

	vTaskDelete(NULL);
	return 0;
}

void xcpEthInit() {
	sys_thread_new("main_thread", (void(*)(void*))main_thread,
			0, MAIN_THREAD_STACKSIZE, MAIN_THREAD_PRIORITY);
}
