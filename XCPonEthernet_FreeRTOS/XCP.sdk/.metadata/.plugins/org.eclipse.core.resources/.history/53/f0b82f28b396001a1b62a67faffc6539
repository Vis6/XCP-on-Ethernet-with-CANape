/* Standard includes. */
#include <stdio.h>
#include "xparameters.h"
#include "xgpiops.h"
#include <sleep.h>
#include "xqspips.h"
#include "xil_printf.h"
#include "XcpBasic.h"
#include "xil_io.h"

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

/* Priorities at which the tasks are created. */
#define	task1_PRIORITY		( tskIDLE_PRIORITY + 3 )
#define	task2_PRIORITY		( tskIDLE_PRIORITY + 2 )
#define xcp_PRIORITY		( tskIDLE_PRIORITY + 4 )

/* Ticks. */
#define TASK1_FREQUENCY_MS			( 2UL / portTICK_PERIOD_MS ) // 2ms period
#define TASK2_FREQUENCY_MS			( 10UL / portTICK_PERIOD_MS ) // 10ms period
#define XCP_FREQUENCY_MS			( 100UL / portTICK_PERIOD_MS ) // period 100ms
/*-----------------------------------------------------------*/

/*
 * The tasks as described in the comments at the top of this file.
 */
static void prvTask1( void *pvParameters );
static void prvTask2( void *pvParameters );
static void xcpTask();

// global variables
static u32 temp1 = 0;
static u32 temp2 = 0;
static u32 temp3 = 0;
/*-----------------------------------------------------------*/

void mainPeriodicTasks() {
	/* Start the four tasks. */
	xTaskCreate( prvTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, task1_PRIORITY, NULL );
	xTaskCreate( prvTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, task2_PRIORITY, NULL );
	xTaskCreate( xcpTask, "xcp", configMINIMAL_STACK_SIZE, NULL, xcp_PRIORITY, NULL );
}

/*-----------------------------------------------------------*/

static void prvTask1( void *pvParameters) {
	TickType_t xNextWakeTime;

	( void ) pvParameters;

	/* Initialize xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();

	for ( ;; ) {
		/* Place this task in the blocked state until it is time to run again. */
		vTaskDelayUntil( &xNextWakeTime, TASK1_FREQUENCY_MS );

		Xil_Out32(0x201B3A0, temp1); // output temp1 to CANape

		temp1++;
		if (temp1 >= 100)
			temp1 = (u32)0;
	}
}

/*-----------------------------------------------------------*/

static void prvTask2( void *pvParameters ) {
	TickType_t xNextWakeTime;

	( void ) pvParameters;

	/* Initialize xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();

	for ( ;; ) {
		/* Place this task in the blocked state until it is time to run again. */
		vTaskDelayUntil( &xNextWakeTime, TASK2_FREQUENCY_MS );

		Xil_Out32(0x201B3A4, temp2); // output temp2 to CANape

		temp2++;
		if (temp2 >= 100)
			temp2 = (u32)0;
	}
}
/*-----------------------------------------------------------*/

static void xcpTask() {
	TickType_t xNextWakeTime;
	xNextWakeTime = xTaskGetTickCount();

	// init
	Xil_Out32(0x1C0034, 0x42480000); // store float, need use IEEE 754 standard

	for ( ;; ) {
		vTaskDelayUntil( &xNextWakeTime, XCP_FREQUENCY_MS );

		temp3 = Xil_In32(0x1C0034);
		Xil_Out32(0x1BE234, temp3);

		//XCP DAQ event
		XcpEvent(0);
	}
}
